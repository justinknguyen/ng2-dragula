{"version":3,"file":"ng2-dragula.mjs","sources":["../../../libs/ng2-dragula/src/Group.ts","../../../libs/ng2-dragula/src/EventTypes.ts","../../../libs/ng2-dragula/src/DrakeFactory.ts","../../../libs/ng2-dragula/src/components/dragula.service.ts","../../../libs/ng2-dragula/src/components/dragula.directive.ts","../../../libs/ng2-dragula/src/components/dragula.module.ts","../../../libs/ng2-dragula/src/MockDrake.ts","../../../libs/ng2-dragula/src/ng2-dragula.ts"],"sourcesContent":["import { DrakeWithModels } from \"./DrakeWithModels\";\r\nimport { DragulaOptions } from \"./DragulaOptions\";\r\n\r\nexport class Group {\r\n  public initEvents = false;\r\n  constructor(\r\n    public name: string,\r\n    public drake: DrakeWithModels,\r\n    public options: DragulaOptions\r\n  ) {}\r\n}\r\n","export enum EventTypes {\r\n    Cancel = \"cancel\",\r\n    Cloned = \"cloned\",\r\n    Drag = \"drag\",\r\n    DragEnd = \"dragend\",\r\n    Drop = \"drop\",\r\n    Out = \"out\",\r\n    Over = \"over\",\r\n    Remove = \"remove\",\r\n    Shadow = \"shadow\",\r\n    DropModel = \"dropModel\",\r\n    RemoveModel = \"removeModel\",\r\n}\r\n\r\nexport const AllEvents: EventTypes[] = Object.keys(EventTypes).map(k => EventTypes[k as keyof typeof EventTypes] as EventTypes);","import { DragulaOptions } from './DragulaOptions';\r\nimport { DrakeWithModels } from './DrakeWithModels';\r\nimport * as dragulaExpt from 'dragula';\r\nexport const dragula: (containers?: any, options?: any) => any = (dragulaExpt as any).default || dragulaExpt;\r\n\r\nexport type DrakeBuilder = (containers: any[], options: DragulaOptions) => DrakeWithModels;\r\n\r\nexport class DrakeFactory {\r\n  constructor (public build: DrakeBuilder = dragula) {}\r\n}\r\n\r\n","import { Injectable, Optional } from '@angular/core';\r\nimport { Group } from '../Group';\r\nimport { DragulaOptions } from '../DragulaOptions';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { EventTypes, AllEvents } from '../EventTypes';\r\nimport { DrakeFactory } from '../DrakeFactory';\r\n\r\ntype FilterProjector<T extends { name: string }> = (\r\n  name: string,\r\n  args: any\r\n) => T;\r\ntype Dispatch = { event: EventTypes; name: string; args: any[] };\r\n\r\nconst filterEvent =\r\n  <\r\n    T extends {\r\n      name: string;\r\n      source?: any;\r\n      target?: any;\r\n      sourceModel?: any;\r\n      targetModel?: any;\r\n    }\r\n  >(\r\n    eventType: EventTypes,\r\n    filterDragType: string | undefined,\r\n    projector: FilterProjector<T>\r\n  ) =>\r\n  (input: Observable<Dispatch>): Observable<T> => {\r\n    return input.pipe(\r\n      filter(({ event, name }) => {\r\n        return (\r\n          event === eventType &&\r\n          (filterDragType === undefined || name === filterDragType)\r\n        );\r\n      }),\r\n      map(({ name, args }) => projector(name, args))\r\n    );\r\n  };\r\n\r\nconst elContainerSourceProjector = (\r\n  name: string,\r\n  [el, container, source]: [Element, Element, Element]\r\n) => ({ name, el, container, source });\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DragulaService {\r\n  private groups: { [k: string]: Group } = {};\r\n  private dispatch$ = new Subject<Dispatch>();\r\n  private elContainerSource = (eventType: EventTypes) => (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(eventType, groupName, elContainerSourceProjector)\r\n    );\r\n  /* https://github.com/bevacqua/dragula#drakeon-events */\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  public cancel = this.elContainerSource(EventTypes.Cancel);\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  public remove = this.elContainerSource(EventTypes.Remove);\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  public shadow = this.elContainerSource(EventTypes.Shadow);\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  public over = this.elContainerSource(EventTypes.Over);\r\n  // eslint-disable-next-line @typescript-eslint/member-ordering\r\n  public out = this.elContainerSource(EventTypes.Out);\r\n\r\n  public drag = (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(\r\n        EventTypes.Drag,\r\n        groupName,\r\n        (name, [el, source]: [Element, Element]) => ({ name, el, source })\r\n      )\r\n    );\r\n\r\n  public dragend = (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(EventTypes.DragEnd, groupName, (name, [el]: [Element]) => ({\r\n        name,\r\n        el,\r\n      }))\r\n    );\r\n\r\n  public drop = (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(\r\n        EventTypes.Drop,\r\n        groupName,\r\n        (\r\n          name,\r\n          [el, target, source, sibling]: [Element, Element, Element, Element]\r\n        ) => {\r\n          return { name, el, target, source, sibling };\r\n        }\r\n      )\r\n    );\r\n\r\n  public cloned = (groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(\r\n        EventTypes.Cloned,\r\n        groupName,\r\n        (\r\n          name,\r\n          [clone, original, cloneType]: [Element, Element, 'mirror' | 'copy']\r\n        ) => {\r\n          return { name, clone, original, cloneType };\r\n        }\r\n      )\r\n    );\r\n\r\n  public dropModel = <T = any>(groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(\r\n        EventTypes.DropModel,\r\n        groupName,\r\n        (\r\n          name,\r\n          [\r\n            el,\r\n            target,\r\n            source,\r\n            sibling,\r\n            item,\r\n            sourceModel,\r\n            targetModel,\r\n            sourceIndex,\r\n            targetIndex,\r\n          ]: [Element, Element, Element, Element, T, T[], T[], number, number]\r\n        ) => {\r\n          return {\r\n            name,\r\n            el,\r\n            target,\r\n            source,\r\n            sibling,\r\n            item,\r\n            sourceModel,\r\n            targetModel,\r\n            sourceIndex,\r\n            targetIndex,\r\n          };\r\n        }\r\n      )\r\n    );\r\n\r\n  public removeModel = <T = any>(groupName?: string) =>\r\n    this.dispatch$.pipe(\r\n      filterEvent(\r\n        EventTypes.RemoveModel,\r\n        groupName,\r\n        (\r\n          name,\r\n          [el, container, source, item, sourceModel, sourceIndex]: [\r\n            Element,\r\n            Element,\r\n            Element,\r\n            T,\r\n            T[],\r\n            number\r\n          ]\r\n        ) => {\r\n          return {\r\n            name,\r\n            el,\r\n            container,\r\n            source,\r\n            item,\r\n            sourceModel,\r\n            sourceIndex,\r\n          };\r\n        }\r\n      )\r\n    );\r\n\r\n  constructor(@Optional() private drakeFactory: DrakeFactory) {\r\n    if (this.drakeFactory === null || this.drakeFactory === undefined) {\r\n      this.drakeFactory = new DrakeFactory();\r\n    }\r\n  }\r\n\r\n  /** Public mainly for testing purposes. Prefer `createGroup()`. */\r\n  public add(group: Group): Group {\r\n    const existingGroup = this.find(group.name);\r\n    if (existingGroup) {\r\n      throw new Error('Group named: \"' + group.name + '\" already exists.');\r\n    }\r\n    this.groups[group.name] = group;\r\n    this.handleModels(group);\r\n    this.setupEvents(group);\r\n    return group;\r\n  }\r\n\r\n  public find(name: string): Group {\r\n    return this.groups[name];\r\n  }\r\n\r\n  public destroy(name: string): void {\r\n    const group = this.find(name);\r\n    if (!group) {\r\n      return;\r\n    }\r\n    group.drake && group.drake.destroy();\r\n    delete this.groups[name];\r\n  }\r\n\r\n  /**\r\n   * Creates a group with the specified name and options.\r\n   *\r\n   * Note: formerly known as `setOptions`\r\n   */\r\n  public createGroup<T = any>(name: string, options: DragulaOptions<T>): Group {\r\n    return this.add(\r\n      new Group(name, this.drakeFactory.build([], options), options)\r\n    );\r\n  }\r\n\r\n  private handleModels({ name, drake, options }: Group): void {\r\n    let dragElm: any;\r\n    let dragIndex: number;\r\n    let dropIndex: number;\r\n    drake.on('remove', (el: any, container: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\r\n      sourceModel = sourceModel.slice(0); // clone it\r\n      const item = sourceModel.splice(dragIndex, 1)[0];\r\n      this.dispatch$.next({\r\n        event: EventTypes.RemoveModel,\r\n        name,\r\n        args: [el, container, source, item, sourceModel, dragIndex],\r\n      });\r\n    });\r\n    drake.on('drag', (el: any, source: any) => {\r\n      if (!drake.models) {\r\n        return;\r\n      }\r\n      dragElm = el;\r\n      dragIndex = this.domIndexOf(el, source);\r\n    });\r\n    drake.on(\r\n      'drop',\r\n      (dropElm: any, target: Element, source: Element, sibling?: Element) => {\r\n        if (!drake.models || !target) {\r\n          return;\r\n        }\r\n        dropIndex = this.domIndexOf(dropElm, target);\r\n        let sourceModel = drake.models[drake.containers.indexOf(source)];\r\n        let targetModel = drake.models[drake.containers.indexOf(target)];\r\n        let item: any;\r\n        if (target === source) {\r\n          sourceModel = sourceModel.slice(0);\r\n          item = sourceModel.splice(dragIndex, 1)[0];\r\n          sourceModel.splice(dropIndex, 0, item);\r\n          // this was true before we cloned and updated sourceModel,\r\n          // but targetModel still has the old value\r\n          targetModel = sourceModel;\r\n        } else {\r\n          const isCopying = dragElm !== dropElm;\r\n          item = sourceModel[dragIndex];\r\n          if (isCopying) {\r\n            if (!options.copyItem) {\r\n              throw new Error(\r\n                'If you have enabled `copy` on a group, you must provide a `copyItem` function.'\r\n              );\r\n            }\r\n            item = options.copyItem(item);\r\n          }\r\n\r\n          if (!isCopying) {\r\n            sourceModel = sourceModel.slice(0);\r\n            sourceModel.splice(dragIndex, 1);\r\n          }\r\n          targetModel = targetModel.slice(0);\r\n          targetModel.splice(dropIndex, 0, item);\r\n          if (isCopying) {\r\n            try {\r\n              target.removeChild(dropElm);\r\n              // eslint-disable-next-line no-empty\r\n            } catch (e) {}\r\n          }\r\n        }\r\n        this.dispatch$.next({\r\n          event: EventTypes.DropModel,\r\n          name,\r\n          args: [\r\n            dropElm,\r\n            target,\r\n            source,\r\n            sibling,\r\n            item,\r\n            sourceModel,\r\n            targetModel,\r\n            dragIndex,\r\n            dropIndex,\r\n          ],\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  private setupEvents(group: Group): void {\r\n    if (group.initEvents) {\r\n      return;\r\n    }\r\n    group.initEvents = true;\r\n    const name = group.name;\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const that: any = this;\r\n    const emitter = (event: EventTypes) => {\r\n      switch (event) {\r\n        case EventTypes.Drag:\r\n          group.drake.on(event, (...args: any[]) => {\r\n            this.dispatch$.next({ event, name, args });\r\n          });\r\n          break;\r\n        case EventTypes.Drop:\r\n          group.drake.on(event, (...args: any[]) => {\r\n            this.dispatch$.next({ event, name, args });\r\n          });\r\n          break;\r\n\r\n        case EventTypes.DragEnd:\r\n          group.drake.on(event, (...args: any[]) => {\r\n            this.dispatch$.next({ event, name, args });\r\n          });\r\n          break;\r\n        \r\n        case EventTypes.Cancel:\r\n        case EventTypes.Remove:\r\n        case EventTypes.Shadow:\r\n        case EventTypes.Over:\r\n        case EventTypes.Out:\r\n          group.drake.on(event, (...args: any[]) => {\r\n            this.dispatch$.next({ event, name, args });\r\n          });\r\n          break;\r\n\r\n        case EventTypes.Cloned:\r\n          group.drake.on(event, (...args: any[]) => {\r\n            this.dispatch$.next({ event, name, args });\r\n          });\r\n          break;\r\n        case EventTypes.DropModel:\r\n          group.drake.on(event, (...args: any[]) => {\r\n            this.dispatch$.next({ event, name, args });\r\n          });\r\n          break;\r\n\r\n        case EventTypes.RemoveModel:\r\n            group.drake.on(event, (...args: any[]) => {\r\n              this.dispatch$.next({ event, name, args });\r\n            });\r\n            break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    AllEvents.forEach(emitter);\r\n  }\r\n\r\n  private domIndexOf(child: any, parent: any): any {\r\n    if (parent) {\r\n      return Array.prototype.indexOf.call(parent.children, child);\r\n    }\r\n  }\r\n}","import { Directive, Input, Output, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChange, EventEmitter } from '@angular/core';\r\nimport { DragulaService } from './dragula.service';\r\nimport { DrakeWithModels } from '../DrakeWithModels';\r\nimport { Subscription } from 'rxjs';\r\nimport { Group } from '../Group';\r\n\r\n@Directive({selector: '[dragula]'})\r\nexport class DragulaDirective implements OnChanges, OnDestroy {\r\n  @Input() public dragula?: string;\r\n  @Input() public dragulaModel?: any[];\r\n  @Output() public dragulaModelChange = new EventEmitter<any[]>();\r\n\r\n  private subs?: Subscription;\r\n\r\n  private get container(): HTMLElement {\r\n    return this.el && this.el.nativeElement;\r\n  }\r\n  private group?: Group;\r\n\r\n  public constructor(private el: ElementRef, private dragulaService: DragulaService) {\r\n  }\r\n\r\n  public ngOnChanges(changes: {dragula?: SimpleChange, dragulaModel?: SimpleChange}): void {\r\n    if (changes && changes.dragula) {\r\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragula;\r\n      const hadPreviousValue = !!prev;\r\n      const hasNewValue = !!current;\r\n      // something -> null       =>  teardown only\r\n      // something -> something  =>  teardown, then setup\r\n      //      null -> something  =>  setup only\r\n      //\r\n      //      null -> null (precluded by fact of change being present)\r\n      if (hadPreviousValue) {\r\n        this.teardown(prev);\r\n      }\r\n      if (hasNewValue) {\r\n        this.setup();\r\n      }\r\n    } else if (changes && changes.dragulaModel) {\r\n      // this code only runs when you're not changing the group name\r\n      // because if you're changing the group name, you'll be doing setup or teardown\r\n      // it also only runs if there is a group name to attach to.\r\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragulaModel;\r\n      const drake = this.group?.drake;\r\n      if (this.dragula && drake) {\r\n        drake.models = drake.models || [];\r\n        const prevIndex = drake.models.indexOf(prev);\r\n        if (prevIndex !== -1) {\r\n          // delete the previous\r\n          drake.models.splice(prevIndex, 1);\r\n          // maybe insert a new one at the same spot\r\n          if (current) {\r\n            drake.models.splice(prevIndex, 0, current);\r\n          }\r\n        } else if (current) {\r\n          // no previous one to remove; just push this one.\r\n          drake.models.push(current);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // call ngOnInit 'setup' because we want to call it in ngOnChanges\r\n  // and it would otherwise run twice\r\n  public setup(): void {\r\n    const checkModel = (group: Group) => {\r\n      if (this.dragulaModel) {\r\n        if (group.drake?.models) {\r\n          group.drake?.models?.push(this.dragulaModel);\r\n        } else {\r\n          if (group.drake) {\r\n            group.drake.models = [this.dragulaModel];\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    // find or create a group\r\n    if (!this.dragula) {\r\n      return;\r\n    }\r\n\r\n    let group = this.dragulaService.find(this.dragula);\r\n    if (!group) {\r\n      const options = {};\r\n      group = this.dragulaService.createGroup(this.dragula, options);\r\n    }\r\n\r\n    // ensure model and container element are pushed\r\n    checkModel(group);\r\n    group.drake?.containers.push(this.container);\r\n    this.subscribe(this.dragula);\r\n\r\n    this.group = group;\r\n  }\r\n\r\n  public subscribe(name: string) {\r\n    this.subs = new Subscription();\r\n    this.subs.add(\r\n      this.dragulaService\r\n      .dropModel(name)\r\n      .subscribe(({ source, target, sourceModel, targetModel }) => {\r\n        if (source === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(sourceModel);\r\n        } else if (target === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(targetModel);\r\n        }\r\n      })\r\n    );\r\n    this.subs.add(\r\n      this.dragulaService\r\n      .removeModel(name)\r\n      .subscribe(({ source, sourceModel }) => {\r\n        if (source === this.el.nativeElement) {\r\n          this.dragulaModelChange.emit(sourceModel);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public teardown(groupName: string): void {\r\n    if (this.subs) {\r\n      this.subs.unsubscribe();\r\n    }\r\n    const group = this.dragulaService.find(groupName);\r\n    if (group) {\r\n      const itemToRemove = group.drake?.containers.indexOf(this.el.nativeElement);\r\n      if (itemToRemove !== -1) {\r\n        group.drake?.containers.splice(itemToRemove, 1);\r\n      }\r\n      if (this.dragulaModel && group.drake && group.drake.models) {\r\n        const modelIndex = group.drake.models.indexOf(this.dragulaModel);\r\n        if (modelIndex !== -1) {\r\n          group.drake.models.splice(modelIndex, 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (!this.dragula) {\r\n      return;\r\n    }\r\n\r\n    this.teardown(this.dragula);\r\n  }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DragulaDirective } from './dragula.directive';\r\nimport { DragulaService } from './dragula.service';\r\n\r\n@NgModule({\r\n  exports: [DragulaDirective],\r\n  declarations: [DragulaDirective],\r\n  providers: [DragulaService]\r\n})\r\nexport class DragulaModule {\r\n  static forRoot(): ModuleWithProviders<DragulaModule> {\r\n    return {\r\n      ngModule: DragulaModule,\r\n      providers: [DragulaService]\r\n    };\r\n  }\r\n}\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport { DrakeWithModels } from './DrakeWithModels';\r\nimport { filter } from 'rxjs/operators';\r\nimport { EventTypes } from './EventTypes';\r\nimport { DragulaOptions } from './DragulaOptions';\r\nimport { DrakeFactory } from './DrakeFactory';\r\nimport { Drake } from 'dragula';\r\n\r\nexport const MockDrakeFactory = new DrakeFactory((containers, options) => {\r\n  return new MockDrake(containers, options);\r\n});\r\n\r\n/** You can use MockDrake to simulate Drake events.\r\n *\r\n * The three methods that actually do anything are `on(event, listener)`,\r\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\r\n * events, and if you injected MockDrake properly with MockDrakeFactory or\r\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\r\n * drags and drops are happening.\r\n *\r\n * Caveats:\r\n *\r\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\r\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\r\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\r\n * 3. None of the other methods do anything.\r\n *    That's ok, because ng2-dragula doesn't use them.\r\n */\r\nexport class MockDrake implements DrakeWithModels {\r\n  // Basic but fully functional event emitter shim\r\n  private emitter$ = new Subject<{ eventType: EventTypes, args: any[] }>();\r\n  private subs = new Subscription();\r\n\r\n  /**\r\n   * @param containers A list of container elements.\r\n   * @param options These will NOT be used. At all.\r\n   * @param models Nonstandard, but useful for testing using `new MockDrake()` directly.\r\n   *               Note, default value is undefined, like a real Drake. Don't change that.\r\n   */\r\n  constructor(\r\n    public containers: Element[] = [],\r\n    public options: DragulaOptions = {},\r\n    public models?: any[][]\r\n  ) {}\r\n\r\n  on(event: 'drag', listener: (el: Element, source: Element) => void): Drake;\r\n  on(event: 'dragend', listener: (el: Element) => void): Drake;\r\n  on(event: 'drop', listener: (el: Element, target: Element, source: Element, sibling: Element) => void): Drake;\r\n  on(event: 'cancel' | 'remove' | 'shadow' | 'over' | 'out', listener: (el: Element, container: Element, source: Element) => void): Drake;\r\n  on(event: 'cloned', listener: (clone: Element, original: Element, type: 'copy' | 'mirror') => void): Drake;\r\n  on(event: 'dropModel', listener: ([el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex,]: [Element, Element, Element, Element, any, any[], any[], number, number]) => void): Drake;\r\n  on(event: 'removeModel', listener: ([el, container, source, item, sourceModel, sourceIndex]: [Element, Element, Element, any, any[], number]) => void): Drake;\r\n\r\n  on(event: string, callback: (...args: any)=> any): any {\r\n    this.subs.add(this.emitter$\r\n      .pipe(\r\n        filter(({ eventType }) => eventType === event)\r\n      )\r\n      .subscribe(({eventType, args} ) => {\r\n        if (eventType === EventTypes.Drag) {\r\n          const argument = Array.from(args);\r\n          const el = argument[0];\r\n          const source = argument[1];\r\n          //@ts-ignore\r\n          callback(el, source);\r\n          return;\r\n        }\r\n\r\n        if (eventType === EventTypes.Drop) {\r\n          const argument = Array.from(args);\r\n          const el = argument[0];\r\n          const target = argument[1];\r\n          const source = argument[2];\r\n          const sibling = argument[3];\r\n          //@ts-ignore\r\n          callback(el, target, source, sibling);\r\n          return;\r\n        }\r\n\r\n        if (eventType === EventTypes.Remove) {\r\n          const argument = Array.from(args);\r\n          const el = argument[0];\r\n          const container = argument[1];\r\n          const source = argument[2];\r\n          //@ts-ignore\r\n          callback(el, container, source);\r\n          return;\r\n        }\r\n        callback(args);\r\n      }));\r\n  }\r\n\r\n  /* Doesn't represent anything meaningful. */\r\n  dragging = false;\r\n\r\n  /* Does nothing useful. */\r\n  start(item: Element): any {\r\n    this.dragging = true;\r\n  }\r\n  /* Does nothing useful. */\r\n  end(): any {\r\n    this.dragging = false;\r\n  }\r\n  /* Does nothing useful. */\r\n  cancel(revert: boolean): any;\r\n  cancel(): any;\r\n  cancel(revert?: any) {\r\n    this.dragging = false;\r\n  }\r\n\r\n  /* Does nothing useful. */\r\n  canMove(item: Element) {\r\n    return this.options.accepts ? this.options.accepts(item) : false;\r\n  }\r\n\r\n  /* Does nothing useful. */\r\n  remove(): any {\r\n    this.dragging = false;\r\n  }\r\n\r\n  destroy(): any {\r\n    this.subs.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * This is the most useful method. You can use it to manually fire events that would normally\r\n   * be fired by a real drake.\r\n   *\r\n   * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\r\n   * DragulaService uses to implement [dragulaModel].\r\n   *\r\n   * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\r\n   *\r\n   * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\r\n   */\r\n  emit(eventType: EventTypes, ...args: any[]) {\r\n    this.emitter$.next({ eventType, args });\r\n  }\r\n\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.DrakeFactory","i1.DragulaService"],"mappings":";;;;;;MAGa,KAAK,CAAA;AAEhB,IAAA,WAAA,CACS,IAAY,EACZ,KAAsB,EACtB,OAAuB,EAAA;QAFvB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QACZ,IAAK,CAAA,KAAA,GAAL,KAAK,CAAiB;QACtB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAgB;QAJzB,IAAU,CAAA,UAAA,GAAG,KAAK,CAAC;KAKtB;AACL;;ICVW,WAYX;AAZD,CAAA,UAAY,UAAU,EAAA;AAClB,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,UAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,UAAA,CAAA,KAAA,CAAA,GAAA,KAAW,CAAA;AACX,IAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC/B,CAAC,EAZW,UAAU,KAAV,UAAU,GAYrB,EAAA,CAAA,CAAA,CAAA;AAEM,MAAM,SAAS,GAAiB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,CAA4B,CAAe,CAAC;;MCXlH,OAAO,GAA8C,WAAmB,CAAC,OAAO,IAAI,YAAY;MAIhG,YAAY,CAAA;AACvB,IAAA,WAAA,CAAoB,QAAsB,OAAO,EAAA;QAA7B,IAAK,CAAA,KAAA,GAAL,KAAK,CAAwB;KAAI;AACtD;;ACKD,MAAM,WAAW,GACf,CASE,SAAqB,EACrB,cAAkC,EAClC,SAA6B,KAE/B,CAAC,KAA2B,KAAmB;AAC7C,IAAA,OAAO,KAAK,CAAC,IAAI,CACf,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAI;QACzB,QACE,KAAK,KAAK,SAAS;aAClB,cAAc,KAAK,SAAS,IAAI,IAAI,KAAK,cAAc,CAAC,EACzD;KACH,CAAC,EACF,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAC/C,CAAC;AACJ,CAAC,CAAC;AAEJ,MAAM,0BAA0B,GAAG,CACjC,IAAY,EACZ,CAAC,EAAE,EAAE,SAAS,EAAE,MAAM,CAA8B,MAChD,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;MAK1B,cAAc,CAAA;AAgIzB,IAAA,WAAA,CAAgC,YAA0B,EAAA;QAA1B,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QA/HlD,IAAM,CAAA,MAAA,GAA2B,EAAE,CAAC;AACpC,QAAA,IAAA,CAAA,SAAS,GAAG,IAAI,OAAO,EAAY,CAAC;QACpC,IAAiB,CAAA,iBAAA,GAAG,CAAC,SAAqB,KAAK,CAAC,SAAkB,KACxE,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE,0BAA0B,CAAC,CAC9D,CAAC;;;QAGG,IAAM,CAAA,MAAA,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;;QAEnD,IAAM,CAAA,MAAA,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;;QAEnD,IAAM,CAAA,MAAA,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;;QAEnD,IAAI,CAAA,IAAA,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;QAE/C,IAAG,CAAA,GAAA,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAE7C,QAAA,IAAA,CAAA,IAAI,GAAG,CAAC,SAAkB,KAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CACT,UAAU,CAAC,IAAI,EACf,SAAS,EACT,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,CAAqB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CACnE,CACF,CAAC;AAEG,QAAA,IAAA,CAAA,OAAO,GAAG,CAAC,SAAkB,KAClC,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,CAAY,MAAM;YACrE,IAAI;YACJ,EAAE;SACH,CAAC,CAAC,CACJ,CAAC;AAEG,QAAA,IAAA,CAAA,IAAI,GAAG,CAAC,SAAkB,KAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CACT,UAAU,CAAC,IAAI,EACf,SAAS,EACT,CACE,IAAI,EACJ,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAuC,KACjE;YACF,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;SAC9C,CACF,CACF,CAAC;AAEG,QAAA,IAAA,CAAA,MAAM,GAAG,CAAC,SAAkB,KACjC,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CACT,UAAU,CAAC,MAAM,EACjB,SAAS,EACT,CACE,IAAI,EACJ,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAwC,KACjE;YACF,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;SAC7C,CACF,CACF,CAAC;AAEG,QAAA,IAAA,CAAA,SAAS,GAAG,CAAU,SAAkB,KAC7C,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CACT,UAAU,CAAC,SAAS,EACpB,SAAS,EACT,CACE,IAAI,EACJ,CACE,EAAE,EACF,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,WAAW,EACX,WAAW,EACX,WAAW,EACX,WAAW,EACuD,KAClE;YACF,OAAO;gBACL,IAAI;gBACJ,EAAE;gBACF,MAAM;gBACN,MAAM;gBACN,OAAO;gBACP,IAAI;gBACJ,WAAW;gBACX,WAAW;gBACX,WAAW;gBACX,WAAW;aACZ,CAAC;SACH,CACF,CACF,CAAC;AAEG,QAAA,IAAA,CAAA,WAAW,GAAG,CAAU,SAAkB,KAC/C,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,WAAW,CACT,UAAU,CAAC,WAAW,EACtB,SAAS,EACT,CACE,IAAI,EACJ,CAAC,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,CAOrD,KACC;YACF,OAAO;gBACL,IAAI;gBACJ,EAAE;gBACF,SAAS;gBACT,MAAM;gBACN,IAAI;gBACJ,WAAW;gBACX,WAAW;aACZ,CAAC;SACH,CACF,CACF,CAAC;QAGF,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;AACjE,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AACxC,SAAA;KACF;;AAGM,IAAA,GAAG,CAAC,KAAY,EAAA;QACrB,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC5C,QAAA,IAAI,aAAa,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,GAAG,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC;AACtE,SAAA;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AAChC,QAAA,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AACzB,QAAA,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxB,QAAA,OAAO,KAAK,CAAC;KACd;AAEM,IAAA,IAAI,CAAC,IAAY,EAAA;AACtB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC1B;AAEM,IAAA,OAAO,CAAC,IAAY,EAAA;QACzB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,KAAK,EAAE;YACV,OAAO;AACR,SAAA;QACD,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;AACrC,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC1B;AAED;;;;AAIG;IACI,WAAW,CAAU,IAAY,EAAE,OAA0B,EAAA;QAClE,OAAO,IAAI,CAAC,GAAG,CACb,IAAI,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAC/D,CAAC;KACH;AAEO,IAAA,YAAY,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAS,EAAA;AAClD,QAAA,IAAI,OAAY,CAAC;AACjB,QAAA,IAAI,SAAiB,CAAC;AACtB,QAAA,IAAI,SAAiB,CAAC;AACtB,QAAA,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAO,EAAE,SAAc,EAAE,MAAW,KAAI;AAC1D,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACjB,OAAO;AACR,aAAA;AACD,YAAA,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACjE,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,YAAA,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,KAAK,EAAE,UAAU,CAAC,WAAW;gBAC7B,IAAI;AACJ,gBAAA,IAAI,EAAE,CAAC,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,CAAC;AAC5D,aAAA,CAAC,CAAC;AACL,SAAC,CAAC,CAAC;QACH,KAAK,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAO,EAAE,MAAW,KAAI;AACxC,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACjB,OAAO;AACR,aAAA;YACD,OAAO,GAAG,EAAE,CAAC;YACb,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AAC1C,SAAC,CAAC,CAAC;AACH,QAAA,KAAK,CAAC,EAAE,CACN,MAAM,EACN,CAAC,OAAY,EAAE,MAAe,EAAE,MAAe,EAAE,OAAiB,KAAI;AACpE,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE;gBAC5B,OAAO;AACR,aAAA;YACD,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC7C,YAAA,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACjE,YAAA,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACjE,YAAA,IAAI,IAAS,CAAC;YACd,IAAI,MAAM,KAAK,MAAM,EAAE;AACrB,gBAAA,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,gBAAA,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;;;gBAGvC,WAAW,GAAG,WAAW,CAAC;AAC3B,aAAA;AAAM,iBAAA;AACL,gBAAA,MAAM,SAAS,GAAG,OAAO,KAAK,OAAO,CAAC;AACtC,gBAAA,IAAI,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;AAC9B,gBAAA,IAAI,SAAS,EAAE;AACb,oBAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;AACrB,wBAAA,MAAM,IAAI,KAAK,CACb,gFAAgF,CACjF,CAAC;AACH,qBAAA;AACD,oBAAA,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC/B,iBAAA;gBAED,IAAI,CAAC,SAAS,EAAE;AACd,oBAAA,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACnC,oBAAA,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AAClC,iBAAA;AACD,gBAAA,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACvC,gBAAA,IAAI,SAAS,EAAE;oBACb,IAAI;AACF,wBAAA,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAE7B,qBAAA;oBAAC,OAAO,CAAC,EAAE,GAAE;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAClB,KAAK,EAAE,UAAU,CAAC,SAAS;gBAC3B,IAAI;AACJ,gBAAA,IAAI,EAAE;oBACJ,OAAO;oBACP,MAAM;oBACN,MAAM;oBACN,OAAO;oBACP,IAAI;oBACJ,WAAW;oBACX,WAAW;oBACX,SAAS;oBACT,SAAS;AACV,iBAAA;AACF,aAAA,CAAC,CAAC;AACL,SAAC,CACF,CAAC;KACH;AAEO,IAAA,WAAW,CAAC,KAAY,EAAA;QAC9B,IAAI,KAAK,CAAC,UAAU,EAAE;YACpB,OAAO;AACR,SAAA;AACD,QAAA,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;AACxB,QAAA,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;;QAExB,MAAM,IAAI,GAAQ,IAAI,CAAC;AACvB,QAAA,MAAM,OAAO,GAAG,CAAC,KAAiB,KAAI;AACpC,YAAA,QAAQ,KAAK;gBACX,KAAK,UAAU,CAAC,IAAI;oBAClB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;gBACR,KAAK,UAAU,CAAC,IAAI;oBAClB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;gBAER,KAAK,UAAU,CAAC,OAAO;oBACrB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;gBAER,KAAK,UAAU,CAAC,MAAM,CAAC;gBACvB,KAAK,UAAU,CAAC,MAAM,CAAC;gBACvB,KAAK,UAAU,CAAC,MAAM,CAAC;gBACvB,KAAK,UAAU,CAAC,IAAI,CAAC;gBACrB,KAAK,UAAU,CAAC,GAAG;oBACjB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;gBAER,KAAK,UAAU,CAAC,MAAM;oBACpB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;gBACR,KAAK,UAAU,CAAC,SAAS;oBACvB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;gBAER,KAAK,UAAU,CAAC,WAAW;oBACvB,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,IAAW,KAAI;AACvC,wBAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAC7C,qBAAC,CAAC,CAAC;oBACH,MAAM;AACV,gBAAA;oBACE,MAAM;AACT,aAAA;AACH,SAAC,CAAC;AACF,QAAA,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KAC5B;IAEO,UAAU,CAAC,KAAU,EAAE,MAAW,EAAA;AACxC,QAAA,IAAI,MAAM,EAAE;AACV,YAAA,OAAO,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC7D,SAAA;KACF;;2GA/TU,cAAc,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,YAAA,EAAA,QAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAd,cAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,cAAc,cAFb,MAAM,EAAA,CAAA,CAAA;2FAEP,cAAc,EAAA,UAAA,EAAA,CAAA;kBAH1B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;0BAiIc,QAAQ;;;MCzKV,gBAAgB,CAAA;IAY3B,WAA2B,CAAA,EAAc,EAAU,cAA8B,EAAA;QAAtD,IAAE,CAAA,EAAA,GAAF,EAAE,CAAY;QAAU,IAAc,CAAA,cAAA,GAAd,cAAc,CAAgB;AAThE,QAAA,IAAA,CAAA,kBAAkB,GAAG,IAAI,YAAY,EAAS,CAAC;KAU/D;AAND,IAAA,IAAY,SAAS,GAAA;QACnB,OAAO,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC;KACzC;AAMM,IAAA,WAAW,CAAC,OAA8D,EAAA;AAC/E,QAAA,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;AAC9B,YAAA,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC;AACpF,YAAA,MAAM,gBAAgB,GAAG,CAAC,CAAC,IAAI,CAAC;AAChC,YAAA,MAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC;;;;;;AAM9B,YAAA,IAAI,gBAAgB,EAAE;AACpB,gBAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACrB,aAAA;AACD,YAAA,IAAI,WAAW,EAAE;gBACf,IAAI,CAAC,KAAK,EAAE,CAAC;AACd,aAAA;AACF,SAAA;AAAM,aAAA,IAAI,OAAO,IAAI,OAAO,CAAC,YAAY,EAAE;;;;AAI1C,YAAA,MAAM,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC;AACzF,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;AAChC,YAAA,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE;gBACzB,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC;gBAClC,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC7C,gBAAA,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE;;oBAEpB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;;AAElC,oBAAA,IAAI,OAAO,EAAE;wBACX,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AAC5C,qBAAA;AACF,iBAAA;AAAM,qBAAA,IAAI,OAAO,EAAE;;AAElB,oBAAA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC5B,iBAAA;AACF,aAAA;AACF,SAAA;KACF;;;IAIM,KAAK,GAAA;AACV,QAAA,MAAM,UAAU,GAAG,CAAC,KAAY,KAAI;YAClC,IAAI,IAAI,CAAC,YAAY,EAAE;AACrB,gBAAA,IAAI,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE;oBACvB,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9C,iBAAA;AAAM,qBAAA;oBACL,IAAI,KAAK,CAAC,KAAK,EAAE;wBACf,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC1C,qBAAA;AACF,iBAAA;AACF,aAAA;AACH,SAAC,CAAC;;AAGF,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;AACR,SAAA;AAED,QAAA,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,OAAO,GAAG,EAAE,CAAC;AACnB,YAAA,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAChE,SAAA;;QAGD,UAAU,CAAC,KAAK,CAAC,CAAC;QAClB,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC7C,QAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAE7B,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;AAEM,IAAA,SAAS,CAAC,IAAY,EAAA;AAC3B,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;AAC/B,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CACX,IAAI,CAAC,cAAc;aAClB,SAAS,CAAC,IAAI,CAAC;AACf,aAAA,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,KAAI;AAC1D,YAAA,IAAI,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE;AACpC,gBAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3C,aAAA;AAAM,iBAAA,IAAI,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE;AAC3C,gBAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3C,aAAA;SACF,CAAC,CACH,CAAC;AACF,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CACX,IAAI,CAAC,cAAc;aAClB,WAAW,CAAC,IAAI,CAAC;aACjB,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,KAAI;AACrC,YAAA,IAAI,MAAM,KAAK,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE;AACpC,gBAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3C,aAAA;SACF,CAAC,CACH,CAAC;KACH;AAEM,IAAA,QAAQ,CAAC,SAAiB,EAAA;QAC/B,IAAI,IAAI,CAAC,IAAI,EAAE;AACb,YAAA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;AACzB,SAAA;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,QAAA,IAAI,KAAK,EAAE;AACT,YAAA,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;AAC5E,YAAA,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;gBACvB,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;AACjD,aAAA;AACD,YAAA,IAAI,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE;AAC1D,gBAAA,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACjE,gBAAA,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;oBACrB,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;AAC1C,iBAAA;AACF,aAAA;AACF,SAAA;KACF;IAEM,WAAW,GAAA;AAChB,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO;AACR,SAAA;AAED,QAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7B;;6GA1IU,gBAAgB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,cAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;iGAAhB,gBAAgB,EAAA,QAAA,EAAA,WAAA,EAAA,MAAA,EAAA,EAAA,OAAA,EAAA,SAAA,EAAA,YAAA,EAAA,cAAA,EAAA,EAAA,OAAA,EAAA,EAAA,kBAAA,EAAA,oBAAA,EAAA,EAAA,aAAA,EAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;2FAAhB,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBAD5B,SAAS;mBAAC,EAAC,QAAQ,EAAE,WAAW,EAAC,CAAA;2HAEhB,OAAO,EAAA,CAAA;sBAAtB,KAAK;gBACU,YAAY,EAAA,CAAA;sBAA3B,KAAK;gBACW,kBAAkB,EAAA,CAAA;sBAAlC,MAAM;;;MCDI,aAAa,CAAA;AACxB,IAAA,OAAO,OAAO,GAAA;QACZ,OAAO;AACL,YAAA,QAAQ,EAAE,aAAa;YACvB,SAAS,EAAE,CAAC,cAAc,CAAC;SAC5B,CAAC;KACH;;0GANU,aAAa,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;2GAAb,aAAa,EAAA,YAAA,EAAA,CAHT,gBAAgB,CAAA,EAAA,OAAA,EAAA,CADrB,gBAAgB,CAAA,EAAA,CAAA,CAAA;2GAIf,aAAa,EAAA,SAAA,EAFb,CAAC,cAAc,CAAC,EAAA,CAAA,CAAA;2FAEhB,aAAa,EAAA,UAAA,EAAA,CAAA;kBALzB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACR,OAAO,EAAE,CAAC,gBAAgB,CAAC;oBAC3B,YAAY,EAAE,CAAC,gBAAgB,CAAC;oBAChC,SAAS,EAAE,CAAC,cAAc,CAAC;AAC5B,iBAAA,CAAA;;;ACAM,MAAM,gBAAgB,GAAG,IAAI,YAAY,CAAC,CAAC,UAAU,EAAE,OAAO,KAAI;AACvE,IAAA,OAAO,IAAI,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC,EAAE;AAEH;;;;;;;;;;;;;;;AAeG;MACU,SAAS,CAAA;AAKpB;;;;;AAKG;AACH,IAAA,WAAA,CACS,aAAwB,EAAE,EAC1B,OAA0B,GAAA,EAAE,EAC5B,MAAgB,EAAA;QAFhB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAgB;QAC1B,IAAO,CAAA,OAAA,GAAP,OAAO,CAAqB;QAC5B,IAAM,CAAA,MAAA,GAAN,MAAM,CAAU;;AAZjB,QAAA,IAAA,CAAA,QAAQ,GAAG,IAAI,OAAO,EAA0C,CAAC;AACjE,QAAA,IAAA,CAAA,IAAI,GAAG,IAAI,YAAY,EAAE,CAAC;;QA8DlC,IAAQ,CAAA,QAAA,GAAG,KAAK,CAAC;KAlDb;IAUJ,EAAE,CAAC,KAAa,EAAE,QAA8B,EAAA;AAC9C,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ;AACxB,aAAA,IAAI,CACH,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,SAAS,KAAK,KAAK,CAAC,CAC/C;aACA,SAAS,CAAC,CAAC,EAAC,SAAS,EAAE,IAAI,EAAC,KAAK;AAChC,YAAA,IAAI,SAAS,KAAK,UAAU,CAAC,IAAI,EAAE;gBACjC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,gBAAA,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvB,gBAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAE3B,gBAAA,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBACrB,OAAO;AACR,aAAA;AAED,YAAA,IAAI,SAAS,KAAK,UAAU,CAAC,IAAI,EAAE;gBACjC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,gBAAA,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvB,gBAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC3B,gBAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC3B,gBAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;gBAE5B,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBACtC,OAAO;AACR,aAAA;AAED,YAAA,IAAI,SAAS,KAAK,UAAU,CAAC,MAAM,EAAE;gBACnC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC,gBAAA,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvB,gBAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC9B,gBAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAE3B,gBAAA,QAAQ,CAAC,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;gBAChC,OAAO;AACR,aAAA;YACD,QAAQ,CAAC,IAAI,CAAC,CAAC;SAChB,CAAC,CAAC,CAAC;KACP;;AAMD,IAAA,KAAK,CAAC,IAAa,EAAA;AACjB,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACtB;;IAED,GAAG,GAAA;AACD,QAAA,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACvB;AAID,IAAA,MAAM,CAAC,MAAY,EAAA;AACjB,QAAA,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACvB;;AAGD,IAAA,OAAO,CAAC,IAAa,EAAA;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;KAClE;;IAGD,MAAM,GAAA;AACJ,QAAA,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACvB;IAED,OAAO,GAAA;AACL,QAAA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;KACzB;AAED;;;;;;;;;;AAUG;AACH,IAAA,IAAI,CAAC,SAAqB,EAAE,GAAG,IAAW,EAAA;QACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KACzC;AAEF;;AC3ID;;AAEG;;;;"}